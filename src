package gui;

import db.DatabaseHelper;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class LibraryGUI extends JFrame {
    private JTextField idField, titleField, authorField;
    private JTable bookTable;
    private DefaultTableModel tableModel;

    public LibraryGUI() {
        setTitle("Library Management System");
        setSize(700, 450);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        initComponents();
        loadBooks();
    }

    private void initComponents() {
        JPanel panel = new JPanel(new GridLayout(5, 2, 5, 5));
        idField = new JTextField();
        titleField = new JTextField();
        authorField = new JTextField();

        panel.add(new JLabel("Book ID:"));
        panel.add(idField);
        panel.add(new JLabel("Title:"));
        panel.add(titleField);
        panel.add(new JLabel("Author:"));
        panel.add(authorField);

        JButton addButton = new JButton("Add");
        JButton deleteButton = new JButton("Delete");
        JButton searchButton = new JButton("Search (By Title)");
        JButton refreshButton = new JButton("Refresh");

        addButton.addActionListener(e -> addBook());
        deleteButton.addActionListener(e -> deleteBook());
        searchButton.addActionListener(e -> searchBookByTitle());
        refreshButton.addActionListener(e -> loadBooks());

        panel.add(addButton);
        panel.add(deleteButton);
        panel.add(searchButton);
        panel.add(refreshButton);

        add(panel, BorderLayout.NORTH);

        tableModel = new DefaultTableModel(new String[]{"ID", "Title", "Author"}, 0);
        bookTable = new JTable(tableModel);
        add(new JScrollPane(bookTable), BorderLayout.CENTER);
    }

    private void addBook() {
        String idText = idField.getText().trim();
        String title = titleField.getText().trim();
        String author = authorField.getText().trim();

        if (idText.isEmpty() || title.isEmpty() || author.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required.");
            return;
        }

        try {
            int id = Integer.parseInt(idText);
            if (DatabaseHelper.addBook(id, title, author)) {
                JOptionPane.showMessageDialog(this, "Book Added!");
                loadBooks();
            } else {
                JOptionPane.showMessageDialog(this, "Book ID already exists.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Book ID must be a number.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Adding Book!\n" + e.getMessage());
        }
    }

    private void deleteBook() {
        String idText = idField.getText().trim();
        if (idText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter Book ID to delete.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this book?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) return;

        try {
            int id = Integer.parseInt(idText);
            if (DatabaseHelper.deleteBook(id)) {
                JOptionPane.showMessageDialog(this, "Book Deleted!");
                loadBooks();
            } else {
                JOptionPane.showMessageDialog(this, "Book ID not found.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Book ID must be numeric.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Deleting Book!\n" + e.getMessage());
        }
    }

    private void searchBookByTitle() {
        String title = titleField.getText().trim();
        if (title.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter a title to search.");
            return;
        }

        try {
            ResultSet rs = DatabaseHelper.searchBookByTitle(title);
            tableModel.setRowCount(0);
            while (rs.next()) {
                tableModel.addRow(new Object[]{
                        rs.getInt("id"),
                        rs.getString("title"),
                        rs.getString("author")
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Searching Book!\n" + e.getMessage());
        }
    }

    private void loadBooks() {
        try {
            ResultSet rs = DatabaseHelper.getAllBooks();
            tableModel.setRowCount(0);
            while (rs.next()) {
                tableModel.addRow(new Object[]{
                        rs.getInt("id"),
                        rs.getString("title"),
                        rs.getString("author")
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Loading Books!\n" + e.getMessage());
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new LibraryGUI().setVisible(true));
    }
}
