import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class LibraryGUI extends JFrame {
    private JTextField idField, titleField, authorField;
    private JTable bookTable;
    private DefaultTableModel tableModel;

    Connection conn;
    PreparedStatement pst;

    public LibraryGUI() {
        setTitle("Library Management System");
        setSize(600, 400);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        connectDatabase();
        createTableIfNotExists();
        initComponents();
        loadBooks();
    }

    private void connectDatabase() {
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library_db", "root", "your_password");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Database Connection Failed!");
            System.exit(1);
        }
    }

    private void createTableIfNotExists() {
        try (Statement stmt = conn.createStatement()) {
            String sql = """
                CREATE TABLE IF NOT EXISTS books (
                    id INT PRIMARY KEY,
                    title VARCHAR(100),
                    author VARCHAR(100)
                )
            """;
            stmt.execute(sql);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void initComponents() {
        JPanel panel = new JPanel(new GridLayout(5, 2, 5, 5));
        idField = new JTextField();
        titleField = new JTextField();
        authorField = new JTextField();

        panel.add(new JLabel("Book ID:"));
        panel.add(idField);
        panel.add(new JLabel("Title:"));
        panel.add(titleField);
        panel.add(new JLabel("Author:"));
        panel.add(authorField);

        JButton addButton = new JButton("Add");
        JButton deleteButton = new JButton("Delete");
        JButton searchButton = new JButton("Search");
        JButton refreshButton = new JButton("Refresh");

        addButton.addActionListener(e -> addBook());
        deleteButton.addActionListener(e -> deleteBook());
        searchButton.addActionListener(e -> searchBook());
        refreshButton.addActionListener(e -> loadBooks());

        panel.add(addButton);
        panel.add(deleteButton);
        panel.add(searchButton);
        panel.add(refreshButton);

        add(panel, BorderLayout.NORTH);

        tableModel = new DefaultTableModel(new String[]{"ID", "Title", "Author"}, 0);
        bookTable = new JTable(tableModel);
        add(new JScrollPane(bookTable), BorderLayout.CENTER);
    }

    private void addBook() {
        try {
            String sql = "INSERT INTO books VALUES (?, ?, ?)";
            pst = conn.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(idField.getText()));
            pst.setString(2, titleField.getText());
            pst.setString(3, authorField.getText());
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Book Added!");
            loadBooks();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Adding Book!");
        }
    }

    private void deleteBook() {
        try {
            String sql = "DELETE FROM books WHERE id = ?";
            pst = conn.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(idField.getText()));
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this, "Book Deleted!");
            loadBooks();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Deleting Book!");
        }
    }

    private void searchBook() {
        try {
            String sql = "SELECT * FROM books WHERE id = ?";
            pst = conn.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(idField.getText()));
            ResultSet rs = pst.executeQuery();
            tableModel.setRowCount(0);
            while (rs.next()) {
                tableModel.addRow(new Object[]{
                        rs.getInt("id"),
                        rs.getString("title"),
                        rs.getString("author")
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Searching Book!");
        }
    }

    private void loadBooks() {
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM books");
            tableModel.setRowCount(0);
            while (rs.next()) {
                tableModel.addRow(new Object[]{
                        rs.getInt("id"),
                        rs.getString("title"),
                        rs.getString("author")
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Loading Books!");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new LibraryGUI().setVisible(true));
    }
}
